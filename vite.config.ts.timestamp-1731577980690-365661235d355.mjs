// vite.config.ts
import { loadEnv } from "file:///G:/%E5%88%98%E7%BB%AD/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E5%89%8D%E7%AB%AF%20Vue%20%E5%90%8E%E5%8F%B0%E6%A8%A1%E6%9D%BF%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81/pangza-vue-admin/node_modules/vite/dist/node/index.js";

// vite/plugins/index.ts
import Vue from "file:///G:/%E5%88%98%E7%BB%AD/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E5%89%8D%E7%AB%AF%20Vue%20%E5%90%8E%E5%8F%B0%E6%A8%A1%E6%9D%BF%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81/pangza-vue-admin/node_modules/@vitejs/plugin-vue/dist/index.mjs";

// vite/plugins/mock/index.ts
import { viteMockServe } from "file:///G:/%E5%88%98%E7%BB%AD/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E5%89%8D%E7%AB%AF%20Vue%20%E5%90%8E%E5%8F%B0%E6%A8%A1%E6%9D%BF%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81/pangza-vue-admin/node_modules/vite-plugin-mock/dist/index.mjs";
function setupMockPlugin(isBuild) {
  return viteMockServe({
    mockPath: "mock",
    enable: !isBuild,
    logger: true
  });
}
var mock_default = setupMockPlugin;

// vite/plugins/index.ts
import SVGLoader from "file:///G:/%E5%88%98%E7%BB%AD/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E5%89%8D%E7%AB%AF%20Vue%20%E5%90%8E%E5%8F%B0%E6%A8%A1%E6%9D%BF%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81/pangza-vue-admin/node_modules/vite-svg-loader/index.js";
import VueJSX from "file:///G:/%E5%88%98%E7%BB%AD/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E5%89%8D%E7%AB%AF%20Vue%20%E5%90%8E%E5%8F%B0%E6%A8%A1%E6%9D%BF%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81/pangza-vue-admin/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import DefinePluginOption from "file:///G:/%E5%88%98%E7%BB%AD/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E5%89%8D%E7%AB%AF%20Vue%20%E5%90%8E%E5%8F%B0%E6%A8%A1%E6%9D%BF%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81/pangza-vue-admin/node_modules/unplugin-vue-define-options/dist/vite.mjs";
function createPlugins(_viteEnv, isBuild) {
  const pluginList = [Vue(), SVGLoader(), VueJSX()];
  if (_viteEnv.VITE_ENABLE_MOCK) {
    pluginList.push(mock_default(isBuild));
  }
  pluginList.push(DefinePluginOption());
  return pluginList;
}
var plugins_default = createPlugins;

// vite/alias/index.ts
import { resolve } from "path";
var __vite_injected_original_dirname = "G:\\\u5218\u7EED\\\u9879\u76EE\u6587\u4EF6\\\u4E2A\u4EBA\u9879\u76EE\\\u524D\u7AEF Vue \u540E\u53F0\u6A21\u677F\u9879\u76EE\\\u9879\u76EE\u6E90\u7801\\pangza-vue-admin\\vite\\alias";
function parseUrl(url) {
  return resolve(__vite_injected_original_dirname, `../../${url}`);
}
function createAlias() {
  return {
    "@": parseUrl("src"),
    "@t": parseUrl("types"),
    "@vite": parseUrl("vite")
  };
}
var alias_default = createAlias;

// vite/index.ts
function createVite(viteEnv, isBuild, _option) {
  const config = {
    plugins: plugins_default(viteEnv, isBuild),
    resolve: {
      alias: alias_default()
    },
    define: {
      // enable hydration mismatch details in production build
      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: false
    }
  };
  return config;
}
var vite_default = createVite;

// vite/env/index.ts
import _ from "file:///G:/%E5%88%98%E7%BB%AD/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E5%89%8D%E7%AB%AF%20Vue%20%E5%90%8E%E5%8F%B0%E6%A8%A1%E6%9D%BF%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81/pangza-vue-admin/node_modules/lodash-es/lodash.js";
function parseEnv(env) {
  const cloneEnv = _.cloneDeep(env);
  Object.entries(cloneEnv).forEach(([key, value]) => {
    if (["true", "false"].includes(value)) {
      cloneEnv[key] = value === "true";
    } else if (/^\d+$/.test(value)) {
      cloneEnv[key] = Number(value);
    } else if (value === "undefined") {
      cloneEnv[key] = void 0;
    } else if (value === "null") {
      cloneEnv[key] = null;
    } else if (key === "VITE_PROXY") {
      cloneEnv[key] = JSON.parse(value.replace(/'/g, '"'));
    } else {
      cloneEnv[key] = value;
    }
  });
  return cloneEnv;
}
var env_default = parseEnv;

// vite.config.ts
var vite_config_default = ({ command, mode }) => {
  const root = process.cwd();
  const env = env_default(loadEnv(mode, root));
  const config = vite_default(env, command === "build");
  return config;
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
